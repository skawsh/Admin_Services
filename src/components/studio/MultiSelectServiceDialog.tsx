import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Service, SubService, ClothingItem } from '@/types/services';
import { Card, CardContent } from "@/components/ui/card";
import MultiSelect from '@/components/ui/multi-select';
import { ChevronDown, Plus, X } from 'lucide-react';
import { Badge } from "@/components/ui/badge";
import AddItemPopup from './AddItemPopup';
import CreateItemsDialog from './CreateItemsDialog';

interface MultiSelectServiceDialogProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  services: Service[];
  subServices: SubService[];
  clothingItems: ClothingItem[];
  washCategory: 'standard' | 'express' | 'both';
  onSave: (data: any) => void;
  editingService?: any | null;
}

const MultiSelectServiceDialog: React.FC<MultiSelectServiceDialogProps> = ({
  isOpen,
  onOpenChange,
  services,
  subServices,
  clothingItems,
  washCategory,
  onSave,
  editingService = null,
}) => {
  const [selectedServiceId, setSelectedServiceId] = useState<string>('');
  const [selectedSubServices, setSelectedSubServices] = useState<string[]>([]);
  const [pricePerKg, setPricePerKg] = useState<Record<string, { standard: string, express: string }>>({});
  const [pricePerItem, setPricePerItem] = useState<Record<string, { standard: string, express: string }>>({});
  const [selectedClothingItems, setSelectedClothingItems] = useState<Record<string, string[]>>({});
  const [clothingItemPrices, setClothingItemPrices] = useState<Record<string, Record<string, { standard: string, express: string }>>>({});
  const [formErrors, setFormErrors] = useState<string[]>([]);
  const [activeSubServiceId, setActiveSubServiceId] = useState<string | null>(null);
  const [isAddItemsOpen, setIsAddItemsOpen] = useState(false);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  useEffect(() => {
    if (isOpen) {
      if (!editingService) {
        resetForm();
      } else {
        populateFormWithEditingData();
      }
    }
  }, [isOpen, editingService]);

  const resetForm = () => {
    setSelectedServiceId('');
    setSelectedSubServices([]);
    setPricePerKg({});
    setPricePerItem({});
    setSelectedClothingItems({});
    setClothingItemPrices({});
    setFormErrors([]);
    setActiveSubServiceId(null);
  };

  const populateFormWithEditingData = () => {
    if (!editingService) return;

    setSelectedServiceId(editingService.serviceId);
    const subServiceIds = editingService.subServices.map((subService: any) => subService.name);
    setSelectedSubServices(subServiceIds);

    const newPricePerKg: Record<string, { standard: string, express: string }> = {};
    const newPricePerItem: Record<string, { standard: string, express: string }> = {};
    const newSelectedClothingItems: Record<string, string[]> = {};
    const newClothingItemPrices: Record<string, Record<string, { standard: string, express: string }>> = {};

    editingService.subServices.forEach((subService: any) => {
      const subServiceId = subService.name;
      
      newPricePerKg[subServiceId] = {
        standard: subService.standardPricePerKg || subService.pricePerKg || '',
        express: subService.expressPricePerKg || ''
      };
      
      newPricePerItem[subServiceId] = {
        standard: subService.standardPricePerItem || subService.pricePerItem || '',
        express: subService.expressPricePerItem || ''
      };
      
      if (subService.selectedItems && subService.selectedItems.length > 0) {
        newSelectedClothingItems[subServiceId] = [...subService.selectedItems];
        
        newClothingItemPrices[subServiceId] = {};
        subService.selectedItems.forEach((itemId: string) => {
          newClothingItemPrices[subServiceId][itemId] = {
            standard: subService.standardItemPrices?.[itemId] || subService.itemPrices?.[itemId] || '',
            express: subService.expressItemPrices?.[itemId] || ''
          };
        });
      }
    });

    setPricePerKg(newPricePerKg);
    setPricePerItem(newPricePerItem);
    setSelectedClothingItems(newSelectedClothingItems);
    setClothingItemPrices(newClothingItemPrices);
    
    if (subServiceIds.length > 0) {
      setActiveSubServiceId(subServiceIds[0]);
    }
  };

  const handleServiceChange = (value: string) => {
    setSelectedServiceId(value);
  };

  const handleSubServiceSelect = (subServiceId: string) => {
    if (!selectedSubServices.includes(subServiceId)) {
      const newSelectedSubServices = [...selectedSubServices, subServiceId];
      setSelectedSubServices(newSelectedSubServices);
      
      setPricePerKg(prev => ({
        ...prev,
        [subServiceId]: { standard: '', express: '' }
      }));
      
      setPricePerItem(prev => ({
        ...prev,
        [subServiceId]: { standard: '', express: '' }
      }));
      
      setSelectedClothingItems(prev => ({
        ...prev,
        [subServiceId]: []
      }));
      
      setClothingItemPrices(prev => ({
        ...prev,
        [subServiceId]: {}\n      }));
      
      setActiveSubServiceId(subServiceId);\n    }\n  };\n\n  const handleRemoveSubService = (subServiceId: string) => {\n    setSelectedSubServices(prev => prev.filter(id => id !== subServiceId));\n    \n    if (activeSubServiceId === subServiceId) {\n      const remaining = selectedSubServices.filter(id => id !== subServiceId);\n      setActiveSubServiceId(remaining.length > 0 ? remaining[0] : null);\n    }\n  };\n\n  const handlePricePerKgChange = (\n    subServiceId: string, \n    type: 'standard' | 'express',\n    value: string\n  ) => {\n    setPricePerKg(prev => ({\n      ...prev,\n      [subServiceId]: {\n        ...prev[subServiceId],\n        [type]: value\n      }\n    }));\n  };\n\n  const handlePricePerItemChange = (\n    subServiceId: string, \n    type: 'standard' | 'express',\n    value: string\n  ) => {\n    setPricePerItem(prev => ({\n      ...prev,\n      [subServiceId]: {\n        ...prev[subServiceId],\n        [type]: value\n      }\n    }));\n  };\n\n  const handleClothingItemPriceChange = (\n    subServiceId: string,\n    itemId: string,\n    type: 'standard' | 'express',\n    value: string\n  ) => {\n    setClothingItemPrices(prev => ({\n      ...prev,\n      [subServiceId]: {\n        ...(prev[subServiceId] || {}),\n        [itemId]: {\n          ...(prev[subServiceId]?.[itemId] || { standard: '', express: '' }),\n          [type]: value\n        }\n      }\n    }));\n  };\n\n  const handleRemoveClothingItem = (subServiceId: string, itemId: string) => {\n    setSelectedClothingItems(prev => {\n      const updatedItems = { ...prev };\n      if (updatedItems[subServiceId]) {\n        updatedItems[subServiceId] = updatedItems[subServiceId].filter(id => id !== itemId);\n      }\n      return updatedItems;\n    });\n\n    setClothingItemPrices(prev => {\n      const updatedPrices = { ...prev };\n      if (updatedPrices[subServiceId] && updatedPrices[subServiceId][itemId]) {\n        const { [itemId]: _, ...rest } = updatedPrices[subServiceId];\n        updatedPrices[subServiceId] = rest;\n      }\n      return updatedPrices;\n    });\n  };\n\n  const handleOpenAddItems = () => {\n    if (activeSubServiceId) {\n      setIsAddItemsOpen(true);\n    }\n  };\n\n  const handleAddItemFromPopup = (itemId: string, standardPrice: string, expressPrice: string) => {\n    if (!activeSubServiceId) return;\n    \n    setSelectedClothingItems(prev => {\n      const items = prev[activeSubServiceId] || [];\n      if (!items.includes(itemId)) {\n        return {\n          ...prev,\n          [activeSubServiceId]: [...items, itemId]\n        };\n      }\n      return prev;\n    });\n    \n    setClothingItemPrices(prev => {\n      const subServicePrices = prev[activeSubServiceId] || {};\n      \n      return {\n        ...prev,\n        [activeSubServiceId]: {\n          ...subServicePrices,\n          [itemId]: {\n            standard: standardPrice,\n            express: expressPrice\n          }\n        }\n      };\n    });\n  };\n\n  const getSubServiceName = (id: string) => {\n    const subService = subServices.find(s => s.id === id);\n    return subService ? subService.name : id;\n  };\n\n  const getClothingItemName = (id: string) => {\n    const item = clothingItems.find(i => i.id === id);\n    return item ? item.name : id;\n  };\n\n  const validateForm = () => {\n    const errors = [];\n    \n    if (!selectedServiceId) {\n      errors.push('Please select a service');\n    }\n    \n    if (selectedSubServices.length === 0) {\n      errors.push('Please select at least one sub-service');\n    }\n    \n    let hasPricing = false;\n    \n    selectedSubServices.forEach(subServiceId => {\n      if (washCategory === 'standard' || washCategory === 'both') {\n        const standardKgPrice = pricePerKg[subServiceId]?.standard;\n        const standardItemPrice = pricePerItem[subServiceId]?.standard;\n        \n        if ((standardKgPrice && standardKgPrice !== '0') || (standardItemPrice && standardItemPrice !== '0')) {\n          hasPricing = true;\n        }\n        \n        const hasStandardItemPrices = (selectedClothingItems[subServiceId] || []).some(itemId => {\n          const price = clothingItemPrices[subServiceId]?.[itemId]?.standard;\n          return price && price !== '0';\n        });\n        \n        if (hasStandardItemPrices) {\n          hasPricing = true;\n        }\n      }\n      \n      if (washCategory === 'express' || washCategory === 'both') {\n        const expressKgPrice = pricePerKg[subServiceId]?.express;\n        const expressItemPrice = pricePerItem[subServiceId]?.express;\n        \n        if ((expressKgPrice && expressKgPrice !== '0') || (expressItemPrice && expressItemPrice !== '0')) {\n          hasPricing = true;\n        }\n        \n        const hasExpressItemPrices = (selectedClothingItems[subServiceId] || []).some(itemId => {\n          const price = clothingItemPrices[subServiceId]?.[itemId]?.express;\n          return price && price !== '0';\n        });\n        \n        if (hasExpressItemPrices) {\n          hasPricing = true;\n        }\n      }\n    });\n    \n    if (!hasPricing) {\n      errors.push('Please add pricing for at least one sub-service');\n    }\n    \n    setFormErrors(errors);\n    return errors.length === 0;\n  };\n\n  const handleSave = () => {\n    if (!validateForm()) {\n      return;\n    }\n    \n    const subServicesData = selectedSubServices.map(subServiceId => {\n      const data: any = {\n        name: subServiceId,\n        selectedItems: selectedClothingItems[subServiceId] || []\n      };\n      \n      if (washCategory === 'standard' || washCategory === 'both') {\n        const standardKgPrice = pricePerKg[subServiceId]?.standard || '0';\n        const standardItemPrice = pricePerItem[subServiceId]?.standard || '0';\n        \n        data.standardPricePerKg = standardKgPrice;\n        data.standardPricePerItem = standardItemPrice;\n        \n        data.standardItemPrices = {};\n        \n        (selectedClothingItems[subServiceId] || []).forEach(itemId => {\n          const price = clothingItemPrices[subServiceId]?.[itemId]?.standard || '0';\n          data.standardItemPrices[itemId] = price;\n        });\n        \n        if (washCategory === 'standard') {\n          data.pricePerKg = standardKgPrice;\n          data.pricePerItem = standardItemPrice;\n          \n          data.itemPrices = {};\n          \n          (selectedClothingItems[subServiceId] || []).forEach(itemId => {\n            const price = clothingItemPrices[subServiceId]?.[itemId]?.standard || '0';\n            data.itemPrices[itemId] = price;\n          });\n        }\n      }\n      \n      if (washCategory === 'express' || washCategory === 'both') {\n        const expressKgPrice = pricePerKg[subServiceId]?.express || '0';\n        const expressItemPrice = pricePerItem[subServiceId]?.express || '0';\n        \n        data.expressPricePerKg = expressKgPrice;\n        data.expressPricePerItem = expressItemPrice;\n        \n        data.expressItemPrices = {};\n        \n        (selectedClothingItems[subServiceId] || []).forEach(itemId => {\n          const price = clothingItemPrices[subServiceId]?.[itemId]?.express || '0';\n          data.expressItemPrices[itemId] = price;\n        });\n        \n        if (washCategory === 'express') {\n          data.pricePerKg = expressKgPrice;\n          data.pricePerItem = expressItemPrice;\n          \n          data.itemPrices = {};\n          \n          (selectedClothingItems[subServiceId] || []).forEach(itemId => {\n            const price = clothingItemPrices[subServiceId]?.[itemId]?.express || '0';\n            data.itemPrices[itemId] = price;\n          });\n        }\n      }\n      \n      if (washCategory === 'both') {\n        data.pricePerKg = pricePerKg[subServiceId]?.standard || '0';\n        data.pricePerItem = pricePerItem[subServiceId]?.standard || '0';\n        \n        data.itemPrices = {};\n        \n        (selectedClothingItems[subServiceId] || []).forEach(itemId => {\n          const price = clothingItemPrices[subServiceId]?.[itemId]?.standard || '0';\n          data.itemPrices[itemId] = price;\n        });\n      }\n      \n      return data;\n    });\n    \n    const serviceData = {\n      serviceId: selectedServiceId,\n      subServices: subServicesData\n    };\n    \n    onSave(serviceData);\n    onOpenChange(false);\n  };\n\n  const renderPriceFields = (subServiceId: string) => {\n    if (washCategory === 'standard') {\n      return (\n        <div className="grid grid-cols-2 gap-4 mt-4">\n          <div className="space-y-2">\n            <Label className="flex items-center text-gray-700">\n              <span className="bg-blue-100 text-blue-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Standard</span>\n              Price per KG\n            </Label>\n            <Input \n              type="number" \n              value={pricePerKg[subServiceId]?.standard || ''}\n              onChange={(e) => handlePricePerKgChange(subServiceId, 'standard', e.target.value)}\n              placeholder="0"\n              className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n            />\n          </div>\n          \n          <div className="space-y-2">\n            <Label className="flex items-center text-gray-700">\n              <span className="bg-blue-100 text-blue-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Standard</span>\n              Price per Item\n            </Label>\n            <Input \n              type="number" \n              value={pricePerItem[subServiceId]?.standard || ''}\n              onChange={(e) => handlePricePerItemChange(subServiceId, 'standard', e.target.value)}\n              placeholder="0"\n              className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n            />\n          </div>\n        </div>\n      );\n    } else if (washCategory === 'express') {\n      return (\n        <div className="grid grid-cols-2 gap-4 mt-4">\n          <div className="space-y-2">\n            <Label className="flex items-center text-gray-700">\n              <span className="bg-green-100 text-green-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Express</span>\n              Price per KG\n            </Label>\n            <Input \n              type="number" \n              value={pricePerKg[subServiceId]?.express || ''}\n              onChange={(e) => handlePricePerKgChange(subServiceId, 'express', e.target.value)}\n              placeholder="0"\n              className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n            />\n          </div>\n          \n          <div className="space-y-2">\n            <Label className="flex items-center text-gray-700">\n              <span className="bg-green-100 text-green-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Express</span>\n              Price per Item\n            </Label>\n            <Input \n              type="number" \n              value={pricePerItem[subServiceId]?.express || ''}\n              onChange={(e) => handlePricePerItemChange(subServiceId, 'express', e.target.value)}\n              placeholder="0"\n              className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n            />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className="space-y-4 mt-4">\n          <div className="grid grid-cols-2 gap-4">\n            <div className="space-y-2">\n              <Label className="flex items-center text-gray-700">\n                <span className="bg-blue-100 text-blue-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Standard</span>\n                Price per KG\n              </Label>\n              <Input \n                type="number" \n                value={pricePerKg[subServiceId]?.standard || ''}\n                onChange={(e) => handlePricePerKgChange(subServiceId, 'standard', e.target.value)}\n                placeholder="0"\n                className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n            \n            <div className="space-y-2">\n              <Label className="flex items-center text-gray-700">\n                <span className="bg-blue-100 text-blue-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Standard</span>\n                Price per Item\n              </Label>\n              <Input \n                type="number" \n                value={pricePerItem[subServiceId]?.standard || ''}\n                onChange={(e) => handlePricePerItemChange(subServiceId, 'standard', e.target.value)}\n                placeholder="0"\n                className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n          </div>\n          \n          <div className="grid grid-cols-2 gap-4">\n            <div className="space-y-2">\n              <Label className="flex items-center text-gray-700">\n                <span className="bg-green-100 text-green-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Express</span>\n                Price per KG\n              </Label>\n              <Input \n                type="number" \n                value={pricePerKg[subServiceId]?.express || ''}\n                onChange={(e) => handlePricePerKgChange(subServiceId, 'express', e.target.value)}\n                placeholder="0"\n                className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n            \n            <div className="space-y-2">\n              <Label className="flex items-center text-gray-700">\n                <span className="bg-green-100 text-green-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Express</span>\n                Price per Item\n              </Label>\n              <Input \n                type="number" \n                value={pricePerItem[subServiceId]?.express || ''}\n                onChange={(e) => handlePricePerItemChange(subServiceId, 'express', e.target.value)}\n                placeholder="0"\n                className="focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const renderClothingItemPriceRow = (subServiceId: string, itemId: string) => {\n    if (washCategory === 'standard') {\n      return (\n        <div key={itemId} className="flex items-center justify-between py-2 px-3 bg-gray-50 rounded-md hover:bg-gray-100 transition-colors duration-150">\n          <span className="font-medium text-gray-800">{getClothingItemName(itemId)}</span>\n          <div className="flex items-center gap-2">\n            <div className="flex items-center">\n              <span className="bg-blue-100 text-blue-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Standard</span>\n              <Input\n                type="number"\n                value={clothingItemPrices[subServiceId]?.[itemId]?.standard || ''}\n                onChange={(e) => handleClothingItemPriceChange(subServiceId, itemId, 'standard', e.target.value)}\n                placeholder="Price"\n                className="w-24 h-8 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n            <Button \n              variant="ghost" \n              size="sm" \n              onClick={() => handleRemoveClothingItem(subServiceId, itemId)}\n              className="h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50"\n            >\n              <X className="h-4 w-4" />\n            </Button>\n          </div>\n        </div>\n      );\n    } else if (washCategory === 'express') {\n      return (\n        <div key={itemId} className="flex items-center justify-between py-2 px-3 bg-gray-50 rounded-md hover:bg-gray-100 transition-colors duration-150">\n          <span className="font-medium text-gray-800">{getClothingItemName(itemId)}</span>\n          <div className="flex items-center gap-2">\n            <div className="flex items-center">\n              <span className="bg-green-100 text-green-700 text-xs font-medium px-2 py-0.5 rounded mr-2">Express</span>\n              <Input\n                type="number"\n                value={clothingItemPrices[subServiceId]?.[itemId]?.express || ''}\n                onChange={(e) => handleClothingItemPriceChange(subServiceId, itemId, 'express', e.target.value)}\n                placeholder="Price"\n                className="w-24 h-8 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n            <Button \n              variant="ghost" \n              size="sm" \n              onClick={() => handleRemoveClothingItem(subServiceId, itemId)}\n              className="h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50"\n            >\n              <X className="h-4 w-4" />\n            </Button>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div key={itemId} className="space-y-2 bg-gray-50 rounded-md p-3 hover:bg-gray-100 transition-colors duration-150">\n          <div className="flex items-center justify-between">\n            <span className="font-medium text-gray-800">{getClothingItemName(itemId)}</span>\n            <Button \n              variant="ghost" \n              size="sm" \n              onClick={() => handleRemoveClothingItem(subServiceId, itemId)}\n              className="h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50"\n            >\n              <X className="h-4 w-4" />\n            </Button>\n          </div>\n          <div className="grid grid-cols-2 gap-2">\n            <div className="flex items-center space-x-2">\n              <span className="bg-blue-100 text-blue-700 text-xs font-medium px-2 py-0.5 rounded whitespace-nowrap">Standard:</span>\n              <Input\n                type="number"\n                value={clothingItemPrices[subServiceId]?.[itemId]?.standard || ''}\n                onChange={(e) => handleClothingItemPriceChange(subServiceId, itemId, 'standard', e.target.value)}\n                placeholder="Price"\n                className="h-8 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n            <div className="flex items-center space-x-2">\n              <span className="bg-green-100 text-green-700 text-xs font-medium px-2 py-0.5 rounded whitespace-nowrap">Express:</span>\n              <Input\n                type="number"\n                value={clothingItemPrices[subServiceId]?.[itemId]?.express || ''}\n                onChange={(e) => handleClothingItemPriceChange(subServiceId, itemId, 'express', e.target.value)}\n                placeholder="Price"\n                className="h-8 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const handleItemsCreated = () => {\n    // Refresh the form to show newly created items\n    setIsCreateDialogOpen(false);\n  };\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onOpenChange}>\n        <DialogContent className="max-w-[600px] max-h-[80vh] overflow-hidden flex flex-col bg-white shadow-xl border-0">\n          <DialogHeader className="text-center pb-2 border-b">\n            <DialogTitle className="text-2xl font-bold text-blue-600">Add Service</DialogTitle>\n            <div className="flex justify-between items-center">\n              <p className="text-gray-500 text-sm mt-1">Add a new service with its subservices and items</p>\n              <Button \n                onClick={() => setIsCreateDialogOpen(true)}\n                className="bg-green-600 hover:bg-green-700 text-white"\n              >\n                Create\n              </Button>\n            </div>\n          </DialogHeader>\n\n          {formErrors.length > 0 && (\n            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md mb-4">\n              <h4 className="font-semibold mb-1">Please fix the following issues:</h4>\n              <ul className="list-disc list-inside">\n                {formErrors.map((error, index) => (\n                  <li key={index}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          \n          <div className="space-y-6 overflow-y-auto pr-2 flex-grow">\n            <div className="space-y-2 mt-2">\n              <Label htmlFor="service-select" className="font-semibold text-gray-800">\n                Service Name\n              </Label>\n              <Select\n                value={selectedServiceId}\n                onValueChange={handleServiceChange}\n                disabled={!!editingService}\n              >\n                <SelectTrigger id="service-select" className="w-full border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">\n                  <SelectValue placeholder="Select a service" />\n                </SelectTrigger>\n                <SelectContent>\n                  {services.filter(service => service.active).map((service) => (\n                    <SelectItem key={service.id} value={service.id}>\n                      {service.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className="space-y-4 pt-2">\n              <Label className="font-semibold text-gray-800">Sub Services</Label>\n              \n              {selectedSubServices.length > 0 && (\n                <div className="space-y-4">\n                  {selectedSubServices.map(subServiceId => (\n                    <Card key={subServiceId} className="border border-gray-200 shadow-sm overflow-hidden hover:shadow-md transition-shadow duration-200">\n                      <CardContent className="p-4 pt-4">\n                        <div className="flex justify-between items-center mb-3">\n                          <h3 className="font-semibold text-gray-800">Sub Service Name</h3>\n                          <Button \n                            variant="ghost" \n                            size="sm" \n                            onClick={() => handleRemoveSubService(subServiceId)}\n                            className="h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-full"\n                          >\n                            <X className="h-4 w-4" />\n                          </Button>\n                        </div>\n                        \n                        <Select value={subServiceId} disabled>\n                          <SelectTrigger className="border-gray-300 bg-gray-50">\n                            <SelectValue>{getSubServiceName(subServiceId)}</SelectValue>\n                          </SelectTrigger>\n                        </Select>\n                        \n                        {renderPriceFields(subServiceId)}\n                        \n                        <div className="mt-5">\n                          <div className="flex justify-between items-center mb-2">\n                            <h4 className="font-semibold text-gray-800">Clothing Items</h4>\n                            <Button \n                              type="button"\n                              variant="outline"\n                              className="h-8 py-1 px-3 text-sm border-blue-200 bg-blue-50 text-blue-600 hover:bg-blue-100 hover:border-blue-300"\n                              onClick={() => {\n                                setActiveSubServiceId(subServiceId);\n                                handleOpenAddItems();\n                              }}\n                            >\n                              <Plus className="h-3.5 w-3.5 mr-1" />\n                              Add Items\n                            </Button>\n                          </div>\n                          \n                          {(selectedClothingItems[subServiceId] || []).length > 0 ? (\n                            <div className="space-y-2 mt-3">\n                              {(selectedClothingItems[subServiceId] || []).map(itemId => \n                                renderClothingItemPriceRow(subServiceId, itemId)\n                              )}\n                            </div>\n                          ) : (\n                            <div className="bg-gray-50 rounded-md p-4 text-center text-gray-500 border border-dashed border-gray-300 mt-2">\n                              No clothing items added yet\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n              \n              <Select onValueChange={handleSubServiceSelect}>\n                <SelectTrigger className="w-full max-w-sm mx-auto bg-blue-50 text-blue-600 hover:bg-blue-100 border-blue-100 font-medium transition-colors">\n                  <div className="flex items-center">\n                    <Plus className="h-4 w-4 mr-2" />\n                    <span>Add Sub Service</span>
